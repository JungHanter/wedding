{"version":3,"sources":["assets/img/snap/08.jpg","assets/img/snap/32.jpg","App.styles.js","utils/useWindowDimensions.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","useStyles","makeStyles","theme","container","width","padding","announcement","fontSize","textAlign","textTransform","marginTop","spacing","marginBottom","marginLeft","marginRight","color","mainSnap","height","paddingTop","mainSnapMobile","backgroundPosition","mainSnapMobileLong","introduce","newlywedsContainer","align","newlywedsName","display","newlywedsHeart","verticalAlign","dateContainer","date","details","detailHeader","detailTitle","fontSerif","fontFamily","fontSansSerif","fontCursive","getWindowDimensions","_window","window","innerWidth","innerHeight","App","styles","_useWindowDimensions","_useState","useState","_useState2","Object","slicedToArray","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","react_default","a","createElement","Fragment","CssBaseline","Container","maxWidth","className","Typography","variant","component","classNames","CardMedia","image","imgSnapMain","title","imgSnapMainMobile","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4bad9647.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/08.d8e54c91.jpg\";","module.exports = __webpack_public_path__ + \"static/media/32.c18fadae.jpg\";","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  container: {\r\n    width: '100%',\r\n    padding: 0,\r\n  },\r\n\r\n  announcement: {\r\n    fontSize: '0.9em',\r\n    textAlign: 'center',\r\n    textTransform: 'uppercase',\r\n    marginTop: theme.spacing(2),\r\n    marginBottom: theme.spacing(1.5),\r\n    marginLeft: 'auto',\r\n    marginRight: 'auto',\r\n    // color: '#f08080', //lightCoral\r\n    color: '#e9967a', //darkSalmon\r\n    // color: '#ffa07a',\r\n    // color: '#d19fa1',\r\n  },\r\n\r\n  mainSnap: {\r\n    width: '100%',\r\n    height: 0,\r\n    paddingTop: '66.667%', //1.5:1\r\n  },\r\n  mainSnapMobile: {\r\n    width: '100%',\r\n    height: 0,\r\n    paddingTop: '120%', //1:1.2 (cut from 1:1.5)\r\n    backgroundPosition: 'top 80% left 0',\r\n  },\r\n\r\n  mainSnapMobileLong: {\r\n    width: '100%',\r\n    height: 0,\r\n    paddingTop: '150%', //1:1.5\r\n  },\r\n\r\n  introduce: {\r\n    marginTop: theme.spacing(2.6),\r\n    marginBottom: theme.spacing(2.6),\r\n  },\r\n  newlywedsContainer: {\r\n    align: 'center',\r\n    textAlign: 'center',\r\n    color: '#000',\r\n    fontSize: '2.4em',\r\n  },\r\n  newlywedsName: {\r\n    align: 'center',\r\n    display: 'inline-block'\r\n  },\r\n  newlywedsHeart: {\r\n    align: 'center',\r\n    verticalAlign: 'center',\r\n    display: 'inline-block',\r\n    fontSize: '0.8em',\r\n    color: '#e9967a', //darkSalmon\r\n    // color: '#d19fa1',\r\n  },\r\n  dateContainer: {\r\n    align: 'center',\r\n    textAlign: 'center',\r\n    // color: '#808080',\r\n    color: '#a5a9a0',\r\n  },\r\n  date: {\r\n    align: 'center',\r\n  },\r\n\r\n  details: {\r\n\r\n  },\r\n  detailHeader: {\r\n    align: 'center',\r\n    textAlign: 'center',\r\n  },\r\n  detailTitle: {\r\n    color: '#545450',\r\n    // color: '#7b7075',\r\n  },\r\n\r\n  fontSerif: {\r\n    fontFamily: ['Jeju Myeongjo', 'Nanum Myeongjo', 'serif'],\r\n  },\r\n  fontSansSerif: {\r\n    fontFamily: ['WONDotum', 'Nanum Gothic', 'sans-serif'],\r\n  },\r\n  fontCursive: {\r\n    fontFamily: ['Parisienne', 'cursive'],\r\n  },\r\n}));\r\n\r\nexport default useStyles;\r\n","import { useState, useEffect } from 'react';\r\n\r\nfunction getWindowDimensions() {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n  return {\r\n    width,\r\n    height\r\n  };\r\n}\r\n\r\nexport default function useWindowDimensions() {\r\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowDimensions(getWindowDimensions());\r\n    }\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n\r\n  return windowDimensions;\r\n}\r\n","import React from 'react';\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\n\r\nimport classNames from 'classnames';\r\nimport useStyles from './App.styles';\r\nimport useWindowDimensions from './utils/useWindowDimensions'\r\n\r\nimport imgSnapMain from './assets/img/snap/32.jpg'\r\nimport imgSnapMainMobile from './assets/img/snap/08.jpg'\r\n// import imgSnapMain from './assets/img/snap/temp.jpg'\r\n// import imgSnapMainMobile from './assets/img/snap/temp.jpg'\r\n\r\nconst App = () => {\r\n  const styles = useStyles();\r\n  const { height, width } = useWindowDimensions();\r\n\r\n  let SnapImage\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"md\" className={styles.container}>\r\n        <Typography variant='h2' component='h2'\r\n                    className={classNames(styles.announcement, styles.fontSansSerif)}>\r\n          WEDDING ANNOUNCEMENT\r\n        </Typography>\r\n\r\n        {width > height ? (\r\n          <CardMedia\r\n            className={styles.mainSnap}\r\n            image={imgSnapMain}\r\n            title=\"Main Snap\"\r\n          />\r\n        ) : ( height > width*1.9 ? (\r\n          <CardMedia\r\n            className={styles.mainSnapMobileLong}\r\n            image={imgSnapMainMobile}\r\n            title=\"Main Snap (Mobile long ver.)\"\r\n          />\r\n        ) : (\r\n          <CardMedia\r\n            className={styles.mainSnapMobile}\r\n            image={imgSnapMainMobile}\r\n            title=\"Main Snap (Mobile ver.)\"\r\n          />\r\n        ))}\r\n\r\n        <div className={styles.introduce} >\r\n          <div className={styles.newlywedsContainer}>\r\n            <Typography variant='h4' component='span'\r\n                        className={classNames(styles.newlywedsName, styles.fontSansSerif)}>\r\n              한터\r\n            </Typography>\r\n            <Typography variant='h5' component='span'\r\n                        className={classNames(styles.newlywedsHeart, styles.fontSansSerif)}>\r\n              &nbsp;♥&nbsp;\r\n            </Typography>\r\n            <Typography variant='h4' component='span'\r\n                        className={classNames(styles.newlywedsName, styles.fontSansSerif)}>\r\n              수지\r\n            </Typography>\r\n          </div>\r\n          <div className={styles.dateContainer}>\r\n            <Typography variant='h6' component='div'\r\n                        className={classNames(styles.date, styles.fontSansSerif)}>\r\n              2019.08.07. WED.\r\n            </Typography>\r\n          </div>\r\n        </div>\r\n\r\n        <div className={styles.details}>\r\n          <div className={styles.detailHeader}>\r\n            <Typography variant='h3' component='h3'\r\n                        className={classNames(styles.detailTitle, styles.fontCursive)}>\r\n              Save the Date\r\n            </Typography>\r\n          </div>\r\n        </div>\r\n\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}